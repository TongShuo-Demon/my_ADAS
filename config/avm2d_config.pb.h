// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avm2d_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_avm2d_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_avm2d_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_avm2d_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_avm2d_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avm2d_5fconfig_2eproto;
namespace adas {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class avm_2d_config;
class avm_2d_configDefaultTypeInternal;
extern avm_2d_configDefaultTypeInternal _avm_2d_config_default_instance_;
class single_view_config;
class single_view_configDefaultTypeInternal;
extern single_view_configDefaultTypeInternal _single_view_config_default_instance_;
class transparent_chassis_config;
class transparent_chassis_configDefaultTypeInternal;
extern transparent_chassis_configDefaultTypeInternal _transparent_chassis_config_default_instance_;
}  // namespace adas
PROTOBUF_NAMESPACE_OPEN
template<> ::adas::Config* Arena::CreateMaybeMessage<::adas::Config>(Arena*);
template<> ::adas::avm_2d_config* Arena::CreateMaybeMessage<::adas::avm_2d_config>(Arena*);
template<> ::adas::single_view_config* Arena::CreateMaybeMessage<::adas::single_view_config>(Arena*);
template<> ::adas::transparent_chassis_config* Arena::CreateMaybeMessage<::adas::transparent_chassis_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace adas {

// ===================================================================

class avm_2d_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adas.avm_2d_config) */ {
 public:
  inline avm_2d_config() : avm_2d_config(nullptr) {};
  virtual ~avm_2d_config();

  avm_2d_config(const avm_2d_config& from);
  avm_2d_config(avm_2d_config&& from) noexcept
    : avm_2d_config() {
    *this = ::std::move(from);
  }

  inline avm_2d_config& operator=(const avm_2d_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline avm_2d_config& operator=(avm_2d_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const avm_2d_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const avm_2d_config* internal_default_instance() {
    return reinterpret_cast<const avm_2d_config*>(
               &_avm_2d_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(avm_2d_config& a, avm_2d_config& b) {
    a.Swap(&b);
  }
  inline void Swap(avm_2d_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(avm_2d_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline avm_2d_config* New() const final {
    return CreateMaybeMessage<avm_2d_config>(nullptr);
  }

  avm_2d_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<avm_2d_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const avm_2d_config& from);
  void MergeFrom(const avm_2d_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(avm_2d_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adas.avm_2d_config";
  }
  protected:
  explicit avm_2d_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm2d_5fconfig_2eproto);
    return ::descriptor_table_avm2d_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraParamPathFieldNumber = 1,
    kCameraImagePathFieldNumber = 2,
    kAvm2DRemapPathFieldNumber = 3,
    kAvm2DWeightsMasksPathFieldNumber = 4,
    kCarImagePathFieldNumber = 11,
    kXlFieldNumber = 5,
    kYlFieldNumber = 6,
    kXrFieldNumber = 7,
    kYrFieldNumber = 8,
    kBirdviewWidthFieldNumber = 9,
    kBirdviewHeightFieldNumber = 10,
  };
  // string camera_param_path = 1;
  void clear_camera_param_path();
  const std::string& camera_param_path() const;
  void set_camera_param_path(const std::string& value);
  void set_camera_param_path(std::string&& value);
  void set_camera_param_path(const char* value);
  void set_camera_param_path(const char* value, size_t size);
  std::string* mutable_camera_param_path();
  std::string* release_camera_param_path();
  void set_allocated_camera_param_path(std::string* camera_param_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_camera_param_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_camera_param_path(
      std::string* camera_param_path);
  private:
  const std::string& _internal_camera_param_path() const;
  void _internal_set_camera_param_path(const std::string& value);
  std::string* _internal_mutable_camera_param_path();
  public:

  // string camera_image_path = 2;
  void clear_camera_image_path();
  const std::string& camera_image_path() const;
  void set_camera_image_path(const std::string& value);
  void set_camera_image_path(std::string&& value);
  void set_camera_image_path(const char* value);
  void set_camera_image_path(const char* value, size_t size);
  std::string* mutable_camera_image_path();
  std::string* release_camera_image_path();
  void set_allocated_camera_image_path(std::string* camera_image_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_camera_image_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_camera_image_path(
      std::string* camera_image_path);
  private:
  const std::string& _internal_camera_image_path() const;
  void _internal_set_camera_image_path(const std::string& value);
  std::string* _internal_mutable_camera_image_path();
  public:

  // string avm2d_remap_path = 3;
  void clear_avm2d_remap_path();
  const std::string& avm2d_remap_path() const;
  void set_avm2d_remap_path(const std::string& value);
  void set_avm2d_remap_path(std::string&& value);
  void set_avm2d_remap_path(const char* value);
  void set_avm2d_remap_path(const char* value, size_t size);
  std::string* mutable_avm2d_remap_path();
  std::string* release_avm2d_remap_path();
  void set_allocated_avm2d_remap_path(std::string* avm2d_remap_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_avm2d_remap_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_avm2d_remap_path(
      std::string* avm2d_remap_path);
  private:
  const std::string& _internal_avm2d_remap_path() const;
  void _internal_set_avm2d_remap_path(const std::string& value);
  std::string* _internal_mutable_avm2d_remap_path();
  public:

  // string avm2d_weights_masks_path = 4;
  void clear_avm2d_weights_masks_path();
  const std::string& avm2d_weights_masks_path() const;
  void set_avm2d_weights_masks_path(const std::string& value);
  void set_avm2d_weights_masks_path(std::string&& value);
  void set_avm2d_weights_masks_path(const char* value);
  void set_avm2d_weights_masks_path(const char* value, size_t size);
  std::string* mutable_avm2d_weights_masks_path();
  std::string* release_avm2d_weights_masks_path();
  void set_allocated_avm2d_weights_masks_path(std::string* avm2d_weights_masks_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_avm2d_weights_masks_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_avm2d_weights_masks_path(
      std::string* avm2d_weights_masks_path);
  private:
  const std::string& _internal_avm2d_weights_masks_path() const;
  void _internal_set_avm2d_weights_masks_path(const std::string& value);
  std::string* _internal_mutable_avm2d_weights_masks_path();
  public:

  // string car_image_path = 11;
  void clear_car_image_path();
  const std::string& car_image_path() const;
  void set_car_image_path(const std::string& value);
  void set_car_image_path(std::string&& value);
  void set_car_image_path(const char* value);
  void set_car_image_path(const char* value, size_t size);
  std::string* mutable_car_image_path();
  std::string* release_car_image_path();
  void set_allocated_car_image_path(std::string* car_image_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_car_image_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_car_image_path(
      std::string* car_image_path);
  private:
  const std::string& _internal_car_image_path() const;
  void _internal_set_car_image_path(const std::string& value);
  std::string* _internal_mutable_car_image_path();
  public:

  // uint32 xl = 5;
  void clear_xl();
  ::PROTOBUF_NAMESPACE_ID::uint32 xl() const;
  void set_xl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_xl() const;
  void _internal_set_xl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 yl = 6;
  void clear_yl();
  ::PROTOBUF_NAMESPACE_ID::uint32 yl() const;
  void set_yl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_yl() const;
  void _internal_set_yl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 xr = 7;
  void clear_xr();
  ::PROTOBUF_NAMESPACE_ID::uint32 xr() const;
  void set_xr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_xr() const;
  void _internal_set_xr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 yr = 8;
  void clear_yr();
  ::PROTOBUF_NAMESPACE_ID::uint32 yr() const;
  void set_yr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_yr() const;
  void _internal_set_yr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 birdview_width = 9;
  void clear_birdview_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 birdview_width() const;
  void set_birdview_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_birdview_width() const;
  void _internal_set_birdview_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 birdview_height = 10;
  void clear_birdview_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 birdview_height() const;
  void set_birdview_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_birdview_height() const;
  void _internal_set_birdview_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:adas.avm_2d_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_param_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_image_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avm2d_remap_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avm2d_weights_masks_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr car_image_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 xl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 yl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 xr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 yr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 birdview_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 birdview_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm2d_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class single_view_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adas.single_view_config) */ {
 public:
  inline single_view_config() : single_view_config(nullptr) {};
  virtual ~single_view_config();

  single_view_config(const single_view_config& from);
  single_view_config(single_view_config&& from) noexcept
    : single_view_config() {
    *this = ::std::move(from);
  }

  inline single_view_config& operator=(const single_view_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline single_view_config& operator=(single_view_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const single_view_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const single_view_config* internal_default_instance() {
    return reinterpret_cast<const single_view_config*>(
               &_single_view_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(single_view_config& a, single_view_config& b) {
    a.Swap(&b);
  }
  inline void Swap(single_view_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(single_view_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline single_view_config* New() const final {
    return CreateMaybeMessage<single_view_config>(nullptr);
  }

  single_view_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<single_view_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const single_view_config& from);
  void MergeFrom(const single_view_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(single_view_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adas.single_view_config";
  }
  protected:
  explicit single_view_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm2d_5fconfig_2eproto);
    return ::descriptor_table_avm2d_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputImagePathFieldNumber = 1,
    kOutputImagePathFieldNumber = 2,
    kCameraParamPathFieldNumber = 3,
  };
  // string input_image_path = 1;
  void clear_input_image_path();
  const std::string& input_image_path() const;
  void set_input_image_path(const std::string& value);
  void set_input_image_path(std::string&& value);
  void set_input_image_path(const char* value);
  void set_input_image_path(const char* value, size_t size);
  std::string* mutable_input_image_path();
  std::string* release_input_image_path();
  void set_allocated_input_image_path(std::string* input_image_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input_image_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input_image_path(
      std::string* input_image_path);
  private:
  const std::string& _internal_input_image_path() const;
  void _internal_set_input_image_path(const std::string& value);
  std::string* _internal_mutable_input_image_path();
  public:

  // string output_image_path = 2;
  void clear_output_image_path();
  const std::string& output_image_path() const;
  void set_output_image_path(const std::string& value);
  void set_output_image_path(std::string&& value);
  void set_output_image_path(const char* value);
  void set_output_image_path(const char* value, size_t size);
  std::string* mutable_output_image_path();
  std::string* release_output_image_path();
  void set_allocated_output_image_path(std::string* output_image_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_output_image_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_output_image_path(
      std::string* output_image_path);
  private:
  const std::string& _internal_output_image_path() const;
  void _internal_set_output_image_path(const std::string& value);
  std::string* _internal_mutable_output_image_path();
  public:

  // string camera_param_path = 3;
  void clear_camera_param_path();
  const std::string& camera_param_path() const;
  void set_camera_param_path(const std::string& value);
  void set_camera_param_path(std::string&& value);
  void set_camera_param_path(const char* value);
  void set_camera_param_path(const char* value, size_t size);
  std::string* mutable_camera_param_path();
  std::string* release_camera_param_path();
  void set_allocated_camera_param_path(std::string* camera_param_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_camera_param_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_camera_param_path(
      std::string* camera_param_path);
  private:
  const std::string& _internal_camera_param_path() const;
  void _internal_set_camera_param_path(const std::string& value);
  std::string* _internal_mutable_camera_param_path();
  public:

  // @@protoc_insertion_point(class_scope:adas.single_view_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_image_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_image_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_param_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm2d_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class transparent_chassis_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adas.transparent_chassis_config) */ {
 public:
  inline transparent_chassis_config() : transparent_chassis_config(nullptr) {};
  virtual ~transparent_chassis_config();

  transparent_chassis_config(const transparent_chassis_config& from);
  transparent_chassis_config(transparent_chassis_config&& from) noexcept
    : transparent_chassis_config() {
    *this = ::std::move(from);
  }

  inline transparent_chassis_config& operator=(const transparent_chassis_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline transparent_chassis_config& operator=(transparent_chassis_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const transparent_chassis_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const transparent_chassis_config* internal_default_instance() {
    return reinterpret_cast<const transparent_chassis_config*>(
               &_transparent_chassis_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(transparent_chassis_config& a, transparent_chassis_config& b) {
    a.Swap(&b);
  }
  inline void Swap(transparent_chassis_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(transparent_chassis_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline transparent_chassis_config* New() const final {
    return CreateMaybeMessage<transparent_chassis_config>(nullptr);
  }

  transparent_chassis_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<transparent_chassis_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const transparent_chassis_config& from);
  void MergeFrom(const transparent_chassis_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(transparent_chassis_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adas.transparent_chassis_config";
  }
  protected:
  explicit transparent_chassis_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm2d_5fconfig_2eproto);
    return ::descriptor_table_avm2d_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrPathFieldNumber = 1,
    kConfigPathFieldNumber = 2,
    kInputDirPathFieldNumber = 3,
    kOutputDirPathFieldNumber = 4,
    kBevWFieldNumber = 5,
    kBevHFieldNumber = 6,
    kBevRatioFieldNumber = 7,
    kBevCenterXFieldNumber = 8,
    kBevCenterYFieldNumber = 9,
    kShiftLrFieldNumber = 10,
    kShiftTbFieldNumber = 11,
    kFilterKernelSizeFieldNumber = 12,
  };
  // string dr_path = 1;
  void clear_dr_path();
  const std::string& dr_path() const;
  void set_dr_path(const std::string& value);
  void set_dr_path(std::string&& value);
  void set_dr_path(const char* value);
  void set_dr_path(const char* value, size_t size);
  std::string* mutable_dr_path();
  std::string* release_dr_path();
  void set_allocated_dr_path(std::string* dr_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dr_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dr_path(
      std::string* dr_path);
  private:
  const std::string& _internal_dr_path() const;
  void _internal_set_dr_path(const std::string& value);
  std::string* _internal_mutable_dr_path();
  public:

  // string config_path = 2;
  void clear_config_path();
  const std::string& config_path() const;
  void set_config_path(const std::string& value);
  void set_config_path(std::string&& value);
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  std::string* mutable_config_path();
  std::string* release_config_path();
  void set_allocated_config_path(std::string* config_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_config_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_config_path(
      std::string* config_path);
  private:
  const std::string& _internal_config_path() const;
  void _internal_set_config_path(const std::string& value);
  std::string* _internal_mutable_config_path();
  public:

  // string input_dir_path = 3;
  void clear_input_dir_path();
  const std::string& input_dir_path() const;
  void set_input_dir_path(const std::string& value);
  void set_input_dir_path(std::string&& value);
  void set_input_dir_path(const char* value);
  void set_input_dir_path(const char* value, size_t size);
  std::string* mutable_input_dir_path();
  std::string* release_input_dir_path();
  void set_allocated_input_dir_path(std::string* input_dir_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_input_dir_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_input_dir_path(
      std::string* input_dir_path);
  private:
  const std::string& _internal_input_dir_path() const;
  void _internal_set_input_dir_path(const std::string& value);
  std::string* _internal_mutable_input_dir_path();
  public:

  // string output_dir_path = 4;
  void clear_output_dir_path();
  const std::string& output_dir_path() const;
  void set_output_dir_path(const std::string& value);
  void set_output_dir_path(std::string&& value);
  void set_output_dir_path(const char* value);
  void set_output_dir_path(const char* value, size_t size);
  std::string* mutable_output_dir_path();
  std::string* release_output_dir_path();
  void set_allocated_output_dir_path(std::string* output_dir_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_output_dir_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_output_dir_path(
      std::string* output_dir_path);
  private:
  const std::string& _internal_output_dir_path() const;
  void _internal_set_output_dir_path(const std::string& value);
  std::string* _internal_mutable_output_dir_path();
  public:

  // uint32 bev_w = 5;
  void clear_bev_w();
  ::PROTOBUF_NAMESPACE_ID::uint32 bev_w() const;
  void set_bev_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bev_w() const;
  void _internal_set_bev_w(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 bev_h = 6;
  void clear_bev_h();
  ::PROTOBUF_NAMESPACE_ID::uint32 bev_h() const;
  void set_bev_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bev_h() const;
  void _internal_set_bev_h(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float bev_ratio = 7;
  void clear_bev_ratio();
  float bev_ratio() const;
  void set_bev_ratio(float value);
  private:
  float _internal_bev_ratio() const;
  void _internal_set_bev_ratio(float value);
  public:

  // float bev_center_x = 8;
  void clear_bev_center_x();
  float bev_center_x() const;
  void set_bev_center_x(float value);
  private:
  float _internal_bev_center_x() const;
  void _internal_set_bev_center_x(float value);
  public:

  // float bev_center_y = 9;
  void clear_bev_center_y();
  float bev_center_y() const;
  void set_bev_center_y(float value);
  private:
  float _internal_bev_center_y() const;
  void _internal_set_bev_center_y(float value);
  public:

  // float shift_lr = 10;
  void clear_shift_lr();
  float shift_lr() const;
  void set_shift_lr(float value);
  private:
  float _internal_shift_lr() const;
  void _internal_set_shift_lr(float value);
  public:

  // float shift_tb = 11;
  void clear_shift_tb();
  float shift_tb() const;
  void set_shift_tb(float value);
  private:
  float _internal_shift_tb() const;
  void _internal_set_shift_tb(float value);
  public:

  // float filter_kernel_size = 12;
  void clear_filter_kernel_size();
  float filter_kernel_size() const;
  void set_filter_kernel_size(float value);
  private:
  float _internal_filter_kernel_size() const;
  void _internal_set_filter_kernel_size(float value);
  public:

  // @@protoc_insertion_point(class_scope:adas.transparent_chassis_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dr_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_dir_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_dir_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bev_w_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bev_h_;
  float bev_ratio_;
  float bev_center_x_;
  float bev_center_y_;
  float shift_lr_;
  float shift_tb_;
  float filter_kernel_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm2d_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:adas.Config) */ {
 public:
  inline Config() : Config(nullptr) {};
  virtual ~Config();

  Config(const Config& from);
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Config& operator=(Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(nullptr);
  }

  Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adas.Config";
  }
  protected:
  explicit Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_avm2d_5fconfig_2eproto);
    return ::descriptor_table_avm2d_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvm2DConfigFieldNumber = 1,
    kSingleViewConfigFieldNumber = 2,
    kTransparentChassisConfigFieldNumber = 3,
  };
  // .adas.avm_2d_config avm_2d_config = 1;
  bool has_avm_2d_config() const;
  private:
  bool _internal_has_avm_2d_config() const;
  public:
  void clear_avm_2d_config();
  const ::adas::avm_2d_config& avm_2d_config() const;
  ::adas::avm_2d_config* release_avm_2d_config();
  ::adas::avm_2d_config* mutable_avm_2d_config();
  void set_allocated_avm_2d_config(::adas::avm_2d_config* avm_2d_config);
  private:
  const ::adas::avm_2d_config& _internal_avm_2d_config() const;
  ::adas::avm_2d_config* _internal_mutable_avm_2d_config();
  public:
  void unsafe_arena_set_allocated_avm_2d_config(
      ::adas::avm_2d_config* avm_2d_config);
  ::adas::avm_2d_config* unsafe_arena_release_avm_2d_config();

  // .adas.single_view_config single_view_config = 2;
  bool has_single_view_config() const;
  private:
  bool _internal_has_single_view_config() const;
  public:
  void clear_single_view_config();
  const ::adas::single_view_config& single_view_config() const;
  ::adas::single_view_config* release_single_view_config();
  ::adas::single_view_config* mutable_single_view_config();
  void set_allocated_single_view_config(::adas::single_view_config* single_view_config);
  private:
  const ::adas::single_view_config& _internal_single_view_config() const;
  ::adas::single_view_config* _internal_mutable_single_view_config();
  public:
  void unsafe_arena_set_allocated_single_view_config(
      ::adas::single_view_config* single_view_config);
  ::adas::single_view_config* unsafe_arena_release_single_view_config();

  // .adas.transparent_chassis_config transparent_chassis_config = 3;
  bool has_transparent_chassis_config() const;
  private:
  bool _internal_has_transparent_chassis_config() const;
  public:
  void clear_transparent_chassis_config();
  const ::adas::transparent_chassis_config& transparent_chassis_config() const;
  ::adas::transparent_chassis_config* release_transparent_chassis_config();
  ::adas::transparent_chassis_config* mutable_transparent_chassis_config();
  void set_allocated_transparent_chassis_config(::adas::transparent_chassis_config* transparent_chassis_config);
  private:
  const ::adas::transparent_chassis_config& _internal_transparent_chassis_config() const;
  ::adas::transparent_chassis_config* _internal_mutable_transparent_chassis_config();
  public:
  void unsafe_arena_set_allocated_transparent_chassis_config(
      ::adas::transparent_chassis_config* transparent_chassis_config);
  ::adas::transparent_chassis_config* unsafe_arena_release_transparent_chassis_config();

  // @@protoc_insertion_point(class_scope:adas.Config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::adas::avm_2d_config* avm_2d_config_;
  ::adas::single_view_config* single_view_config_;
  ::adas::transparent_chassis_config* transparent_chassis_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_avm2d_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// avm_2d_config

// string camera_param_path = 1;
inline void avm_2d_config::clear_camera_param_path() {
  camera_param_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& avm_2d_config::camera_param_path() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.camera_param_path)
  return _internal_camera_param_path();
}
inline void avm_2d_config::set_camera_param_path(const std::string& value) {
  _internal_set_camera_param_path(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.camera_param_path)
}
inline std::string* avm_2d_config::mutable_camera_param_path() {
  // @@protoc_insertion_point(field_mutable:adas.avm_2d_config.camera_param_path)
  return _internal_mutable_camera_param_path();
}
inline const std::string& avm_2d_config::_internal_camera_param_path() const {
  return camera_param_path_.Get();
}
inline void avm_2d_config::_internal_set_camera_param_path(const std::string& value) {
  
  camera_param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void avm_2d_config::set_camera_param_path(std::string&& value) {
  
  camera_param_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.avm_2d_config.camera_param_path)
}
inline void avm_2d_config::set_camera_param_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.avm_2d_config.camera_param_path)
}
inline void avm_2d_config::set_camera_param_path(const char* value,
    size_t size) {
  
  camera_param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.avm_2d_config.camera_param_path)
}
inline std::string* avm_2d_config::_internal_mutable_camera_param_path() {
  
  return camera_param_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* avm_2d_config::release_camera_param_path() {
  // @@protoc_insertion_point(field_release:adas.avm_2d_config.camera_param_path)
  return camera_param_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void avm_2d_config::set_allocated_camera_param_path(std::string* camera_param_path) {
  if (camera_param_path != nullptr) {
    
  } else {
    
  }
  camera_param_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_param_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.avm_2d_config.camera_param_path)
}
inline std::string* avm_2d_config::unsafe_arena_release_camera_param_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.avm_2d_config.camera_param_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return camera_param_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void avm_2d_config::unsafe_arena_set_allocated_camera_param_path(
    std::string* camera_param_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (camera_param_path != nullptr) {
    
  } else {
    
  }
  camera_param_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      camera_param_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.avm_2d_config.camera_param_path)
}

// string camera_image_path = 2;
inline void avm_2d_config::clear_camera_image_path() {
  camera_image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& avm_2d_config::camera_image_path() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.camera_image_path)
  return _internal_camera_image_path();
}
inline void avm_2d_config::set_camera_image_path(const std::string& value) {
  _internal_set_camera_image_path(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.camera_image_path)
}
inline std::string* avm_2d_config::mutable_camera_image_path() {
  // @@protoc_insertion_point(field_mutable:adas.avm_2d_config.camera_image_path)
  return _internal_mutable_camera_image_path();
}
inline const std::string& avm_2d_config::_internal_camera_image_path() const {
  return camera_image_path_.Get();
}
inline void avm_2d_config::_internal_set_camera_image_path(const std::string& value) {
  
  camera_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void avm_2d_config::set_camera_image_path(std::string&& value) {
  
  camera_image_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.avm_2d_config.camera_image_path)
}
inline void avm_2d_config::set_camera_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.avm_2d_config.camera_image_path)
}
inline void avm_2d_config::set_camera_image_path(const char* value,
    size_t size) {
  
  camera_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.avm_2d_config.camera_image_path)
}
inline std::string* avm_2d_config::_internal_mutable_camera_image_path() {
  
  return camera_image_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* avm_2d_config::release_camera_image_path() {
  // @@protoc_insertion_point(field_release:adas.avm_2d_config.camera_image_path)
  return camera_image_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void avm_2d_config::set_allocated_camera_image_path(std::string* camera_image_path) {
  if (camera_image_path != nullptr) {
    
  } else {
    
  }
  camera_image_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_image_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.avm_2d_config.camera_image_path)
}
inline std::string* avm_2d_config::unsafe_arena_release_camera_image_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.avm_2d_config.camera_image_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return camera_image_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void avm_2d_config::unsafe_arena_set_allocated_camera_image_path(
    std::string* camera_image_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (camera_image_path != nullptr) {
    
  } else {
    
  }
  camera_image_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      camera_image_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.avm_2d_config.camera_image_path)
}

// string avm2d_remap_path = 3;
inline void avm_2d_config::clear_avm2d_remap_path() {
  avm2d_remap_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& avm_2d_config::avm2d_remap_path() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.avm2d_remap_path)
  return _internal_avm2d_remap_path();
}
inline void avm_2d_config::set_avm2d_remap_path(const std::string& value) {
  _internal_set_avm2d_remap_path(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.avm2d_remap_path)
}
inline std::string* avm_2d_config::mutable_avm2d_remap_path() {
  // @@protoc_insertion_point(field_mutable:adas.avm_2d_config.avm2d_remap_path)
  return _internal_mutable_avm2d_remap_path();
}
inline const std::string& avm_2d_config::_internal_avm2d_remap_path() const {
  return avm2d_remap_path_.Get();
}
inline void avm_2d_config::_internal_set_avm2d_remap_path(const std::string& value) {
  
  avm2d_remap_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void avm_2d_config::set_avm2d_remap_path(std::string&& value) {
  
  avm2d_remap_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.avm_2d_config.avm2d_remap_path)
}
inline void avm_2d_config::set_avm2d_remap_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avm2d_remap_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.avm_2d_config.avm2d_remap_path)
}
inline void avm_2d_config::set_avm2d_remap_path(const char* value,
    size_t size) {
  
  avm2d_remap_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.avm_2d_config.avm2d_remap_path)
}
inline std::string* avm_2d_config::_internal_mutable_avm2d_remap_path() {
  
  return avm2d_remap_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* avm_2d_config::release_avm2d_remap_path() {
  // @@protoc_insertion_point(field_release:adas.avm_2d_config.avm2d_remap_path)
  return avm2d_remap_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void avm_2d_config::set_allocated_avm2d_remap_path(std::string* avm2d_remap_path) {
  if (avm2d_remap_path != nullptr) {
    
  } else {
    
  }
  avm2d_remap_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avm2d_remap_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.avm_2d_config.avm2d_remap_path)
}
inline std::string* avm_2d_config::unsafe_arena_release_avm2d_remap_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.avm_2d_config.avm2d_remap_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return avm2d_remap_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void avm_2d_config::unsafe_arena_set_allocated_avm2d_remap_path(
    std::string* avm2d_remap_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (avm2d_remap_path != nullptr) {
    
  } else {
    
  }
  avm2d_remap_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      avm2d_remap_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.avm_2d_config.avm2d_remap_path)
}

// string avm2d_weights_masks_path = 4;
inline void avm_2d_config::clear_avm2d_weights_masks_path() {
  avm2d_weights_masks_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& avm_2d_config::avm2d_weights_masks_path() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.avm2d_weights_masks_path)
  return _internal_avm2d_weights_masks_path();
}
inline void avm_2d_config::set_avm2d_weights_masks_path(const std::string& value) {
  _internal_set_avm2d_weights_masks_path(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.avm2d_weights_masks_path)
}
inline std::string* avm_2d_config::mutable_avm2d_weights_masks_path() {
  // @@protoc_insertion_point(field_mutable:adas.avm_2d_config.avm2d_weights_masks_path)
  return _internal_mutable_avm2d_weights_masks_path();
}
inline const std::string& avm_2d_config::_internal_avm2d_weights_masks_path() const {
  return avm2d_weights_masks_path_.Get();
}
inline void avm_2d_config::_internal_set_avm2d_weights_masks_path(const std::string& value) {
  
  avm2d_weights_masks_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void avm_2d_config::set_avm2d_weights_masks_path(std::string&& value) {
  
  avm2d_weights_masks_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.avm_2d_config.avm2d_weights_masks_path)
}
inline void avm_2d_config::set_avm2d_weights_masks_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avm2d_weights_masks_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.avm_2d_config.avm2d_weights_masks_path)
}
inline void avm_2d_config::set_avm2d_weights_masks_path(const char* value,
    size_t size) {
  
  avm2d_weights_masks_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.avm_2d_config.avm2d_weights_masks_path)
}
inline std::string* avm_2d_config::_internal_mutable_avm2d_weights_masks_path() {
  
  return avm2d_weights_masks_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* avm_2d_config::release_avm2d_weights_masks_path() {
  // @@protoc_insertion_point(field_release:adas.avm_2d_config.avm2d_weights_masks_path)
  return avm2d_weights_masks_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void avm_2d_config::set_allocated_avm2d_weights_masks_path(std::string* avm2d_weights_masks_path) {
  if (avm2d_weights_masks_path != nullptr) {
    
  } else {
    
  }
  avm2d_weights_masks_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avm2d_weights_masks_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.avm_2d_config.avm2d_weights_masks_path)
}
inline std::string* avm_2d_config::unsafe_arena_release_avm2d_weights_masks_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.avm_2d_config.avm2d_weights_masks_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return avm2d_weights_masks_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void avm_2d_config::unsafe_arena_set_allocated_avm2d_weights_masks_path(
    std::string* avm2d_weights_masks_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (avm2d_weights_masks_path != nullptr) {
    
  } else {
    
  }
  avm2d_weights_masks_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      avm2d_weights_masks_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.avm_2d_config.avm2d_weights_masks_path)
}

// uint32 xl = 5;
inline void avm_2d_config::clear_xl() {
  xl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::_internal_xl() const {
  return xl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::xl() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.xl)
  return _internal_xl();
}
inline void avm_2d_config::_internal_set_xl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  xl_ = value;
}
inline void avm_2d_config::set_xl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_xl(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.xl)
}

// uint32 yl = 6;
inline void avm_2d_config::clear_yl() {
  yl_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::_internal_yl() const {
  return yl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::yl() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.yl)
  return _internal_yl();
}
inline void avm_2d_config::_internal_set_yl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  yl_ = value;
}
inline void avm_2d_config::set_yl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_yl(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.yl)
}

// uint32 xr = 7;
inline void avm_2d_config::clear_xr() {
  xr_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::_internal_xr() const {
  return xr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::xr() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.xr)
  return _internal_xr();
}
inline void avm_2d_config::_internal_set_xr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  xr_ = value;
}
inline void avm_2d_config::set_xr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_xr(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.xr)
}

// uint32 yr = 8;
inline void avm_2d_config::clear_yr() {
  yr_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::_internal_yr() const {
  return yr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::yr() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.yr)
  return _internal_yr();
}
inline void avm_2d_config::_internal_set_yr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  yr_ = value;
}
inline void avm_2d_config::set_yr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_yr(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.yr)
}

// uint32 birdview_width = 9;
inline void avm_2d_config::clear_birdview_width() {
  birdview_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::_internal_birdview_width() const {
  return birdview_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::birdview_width() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.birdview_width)
  return _internal_birdview_width();
}
inline void avm_2d_config::_internal_set_birdview_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  birdview_width_ = value;
}
inline void avm_2d_config::set_birdview_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_birdview_width(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.birdview_width)
}

// uint32 birdview_height = 10;
inline void avm_2d_config::clear_birdview_height() {
  birdview_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::_internal_birdview_height() const {
  return birdview_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 avm_2d_config::birdview_height() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.birdview_height)
  return _internal_birdview_height();
}
inline void avm_2d_config::_internal_set_birdview_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  birdview_height_ = value;
}
inline void avm_2d_config::set_birdview_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_birdview_height(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.birdview_height)
}

// string car_image_path = 11;
inline void avm_2d_config::clear_car_image_path() {
  car_image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& avm_2d_config::car_image_path() const {
  // @@protoc_insertion_point(field_get:adas.avm_2d_config.car_image_path)
  return _internal_car_image_path();
}
inline void avm_2d_config::set_car_image_path(const std::string& value) {
  _internal_set_car_image_path(value);
  // @@protoc_insertion_point(field_set:adas.avm_2d_config.car_image_path)
}
inline std::string* avm_2d_config::mutable_car_image_path() {
  // @@protoc_insertion_point(field_mutable:adas.avm_2d_config.car_image_path)
  return _internal_mutable_car_image_path();
}
inline const std::string& avm_2d_config::_internal_car_image_path() const {
  return car_image_path_.Get();
}
inline void avm_2d_config::_internal_set_car_image_path(const std::string& value) {
  
  car_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void avm_2d_config::set_car_image_path(std::string&& value) {
  
  car_image_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.avm_2d_config.car_image_path)
}
inline void avm_2d_config::set_car_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  car_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.avm_2d_config.car_image_path)
}
inline void avm_2d_config::set_car_image_path(const char* value,
    size_t size) {
  
  car_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.avm_2d_config.car_image_path)
}
inline std::string* avm_2d_config::_internal_mutable_car_image_path() {
  
  return car_image_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* avm_2d_config::release_car_image_path() {
  // @@protoc_insertion_point(field_release:adas.avm_2d_config.car_image_path)
  return car_image_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void avm_2d_config::set_allocated_car_image_path(std::string* car_image_path) {
  if (car_image_path != nullptr) {
    
  } else {
    
  }
  car_image_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), car_image_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.avm_2d_config.car_image_path)
}
inline std::string* avm_2d_config::unsafe_arena_release_car_image_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.avm_2d_config.car_image_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return car_image_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void avm_2d_config::unsafe_arena_set_allocated_car_image_path(
    std::string* car_image_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (car_image_path != nullptr) {
    
  } else {
    
  }
  car_image_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      car_image_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.avm_2d_config.car_image_path)
}

// -------------------------------------------------------------------

// single_view_config

// string input_image_path = 1;
inline void single_view_config::clear_input_image_path() {
  input_image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& single_view_config::input_image_path() const {
  // @@protoc_insertion_point(field_get:adas.single_view_config.input_image_path)
  return _internal_input_image_path();
}
inline void single_view_config::set_input_image_path(const std::string& value) {
  _internal_set_input_image_path(value);
  // @@protoc_insertion_point(field_set:adas.single_view_config.input_image_path)
}
inline std::string* single_view_config::mutable_input_image_path() {
  // @@protoc_insertion_point(field_mutable:adas.single_view_config.input_image_path)
  return _internal_mutable_input_image_path();
}
inline const std::string& single_view_config::_internal_input_image_path() const {
  return input_image_path_.Get();
}
inline void single_view_config::_internal_set_input_image_path(const std::string& value) {
  
  input_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void single_view_config::set_input_image_path(std::string&& value) {
  
  input_image_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.single_view_config.input_image_path)
}
inline void single_view_config::set_input_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.single_view_config.input_image_path)
}
inline void single_view_config::set_input_image_path(const char* value,
    size_t size) {
  
  input_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.single_view_config.input_image_path)
}
inline std::string* single_view_config::_internal_mutable_input_image_path() {
  
  return input_image_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* single_view_config::release_input_image_path() {
  // @@protoc_insertion_point(field_release:adas.single_view_config.input_image_path)
  return input_image_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void single_view_config::set_allocated_input_image_path(std::string* input_image_path) {
  if (input_image_path != nullptr) {
    
  } else {
    
  }
  input_image_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_image_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.single_view_config.input_image_path)
}
inline std::string* single_view_config::unsafe_arena_release_input_image_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.single_view_config.input_image_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_image_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void single_view_config::unsafe_arena_set_allocated_input_image_path(
    std::string* input_image_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input_image_path != nullptr) {
    
  } else {
    
  }
  input_image_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input_image_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.single_view_config.input_image_path)
}

// string output_image_path = 2;
inline void single_view_config::clear_output_image_path() {
  output_image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& single_view_config::output_image_path() const {
  // @@protoc_insertion_point(field_get:adas.single_view_config.output_image_path)
  return _internal_output_image_path();
}
inline void single_view_config::set_output_image_path(const std::string& value) {
  _internal_set_output_image_path(value);
  // @@protoc_insertion_point(field_set:adas.single_view_config.output_image_path)
}
inline std::string* single_view_config::mutable_output_image_path() {
  // @@protoc_insertion_point(field_mutable:adas.single_view_config.output_image_path)
  return _internal_mutable_output_image_path();
}
inline const std::string& single_view_config::_internal_output_image_path() const {
  return output_image_path_.Get();
}
inline void single_view_config::_internal_set_output_image_path(const std::string& value) {
  
  output_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void single_view_config::set_output_image_path(std::string&& value) {
  
  output_image_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.single_view_config.output_image_path)
}
inline void single_view_config::set_output_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.single_view_config.output_image_path)
}
inline void single_view_config::set_output_image_path(const char* value,
    size_t size) {
  
  output_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.single_view_config.output_image_path)
}
inline std::string* single_view_config::_internal_mutable_output_image_path() {
  
  return output_image_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* single_view_config::release_output_image_path() {
  // @@protoc_insertion_point(field_release:adas.single_view_config.output_image_path)
  return output_image_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void single_view_config::set_allocated_output_image_path(std::string* output_image_path) {
  if (output_image_path != nullptr) {
    
  } else {
    
  }
  output_image_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_image_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.single_view_config.output_image_path)
}
inline std::string* single_view_config::unsafe_arena_release_output_image_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.single_view_config.output_image_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return output_image_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void single_view_config::unsafe_arena_set_allocated_output_image_path(
    std::string* output_image_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (output_image_path != nullptr) {
    
  } else {
    
  }
  output_image_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      output_image_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.single_view_config.output_image_path)
}

// string camera_param_path = 3;
inline void single_view_config::clear_camera_param_path() {
  camera_param_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& single_view_config::camera_param_path() const {
  // @@protoc_insertion_point(field_get:adas.single_view_config.camera_param_path)
  return _internal_camera_param_path();
}
inline void single_view_config::set_camera_param_path(const std::string& value) {
  _internal_set_camera_param_path(value);
  // @@protoc_insertion_point(field_set:adas.single_view_config.camera_param_path)
}
inline std::string* single_view_config::mutable_camera_param_path() {
  // @@protoc_insertion_point(field_mutable:adas.single_view_config.camera_param_path)
  return _internal_mutable_camera_param_path();
}
inline const std::string& single_view_config::_internal_camera_param_path() const {
  return camera_param_path_.Get();
}
inline void single_view_config::_internal_set_camera_param_path(const std::string& value) {
  
  camera_param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void single_view_config::set_camera_param_path(std::string&& value) {
  
  camera_param_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.single_view_config.camera_param_path)
}
inline void single_view_config::set_camera_param_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.single_view_config.camera_param_path)
}
inline void single_view_config::set_camera_param_path(const char* value,
    size_t size) {
  
  camera_param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.single_view_config.camera_param_path)
}
inline std::string* single_view_config::_internal_mutable_camera_param_path() {
  
  return camera_param_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* single_view_config::release_camera_param_path() {
  // @@protoc_insertion_point(field_release:adas.single_view_config.camera_param_path)
  return camera_param_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void single_view_config::set_allocated_camera_param_path(std::string* camera_param_path) {
  if (camera_param_path != nullptr) {
    
  } else {
    
  }
  camera_param_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_param_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.single_view_config.camera_param_path)
}
inline std::string* single_view_config::unsafe_arena_release_camera_param_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.single_view_config.camera_param_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return camera_param_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void single_view_config::unsafe_arena_set_allocated_camera_param_path(
    std::string* camera_param_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (camera_param_path != nullptr) {
    
  } else {
    
  }
  camera_param_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      camera_param_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.single_view_config.camera_param_path)
}

// -------------------------------------------------------------------

// transparent_chassis_config

// string dr_path = 1;
inline void transparent_chassis_config::clear_dr_path() {
  dr_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& transparent_chassis_config::dr_path() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.dr_path)
  return _internal_dr_path();
}
inline void transparent_chassis_config::set_dr_path(const std::string& value) {
  _internal_set_dr_path(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.dr_path)
}
inline std::string* transparent_chassis_config::mutable_dr_path() {
  // @@protoc_insertion_point(field_mutable:adas.transparent_chassis_config.dr_path)
  return _internal_mutable_dr_path();
}
inline const std::string& transparent_chassis_config::_internal_dr_path() const {
  return dr_path_.Get();
}
inline void transparent_chassis_config::_internal_set_dr_path(const std::string& value) {
  
  dr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void transparent_chassis_config::set_dr_path(std::string&& value) {
  
  dr_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.transparent_chassis_config.dr_path)
}
inline void transparent_chassis_config::set_dr_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.transparent_chassis_config.dr_path)
}
inline void transparent_chassis_config::set_dr_path(const char* value,
    size_t size) {
  
  dr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.transparent_chassis_config.dr_path)
}
inline std::string* transparent_chassis_config::_internal_mutable_dr_path() {
  
  return dr_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* transparent_chassis_config::release_dr_path() {
  // @@protoc_insertion_point(field_release:adas.transparent_chassis_config.dr_path)
  return dr_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void transparent_chassis_config::set_allocated_dr_path(std::string* dr_path) {
  if (dr_path != nullptr) {
    
  } else {
    
  }
  dr_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dr_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.transparent_chassis_config.dr_path)
}
inline std::string* transparent_chassis_config::unsafe_arena_release_dr_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.transparent_chassis_config.dr_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dr_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void transparent_chassis_config::unsafe_arena_set_allocated_dr_path(
    std::string* dr_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dr_path != nullptr) {
    
  } else {
    
  }
  dr_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dr_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.transparent_chassis_config.dr_path)
}

// string config_path = 2;
inline void transparent_chassis_config::clear_config_path() {
  config_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& transparent_chassis_config::config_path() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.config_path)
  return _internal_config_path();
}
inline void transparent_chassis_config::set_config_path(const std::string& value) {
  _internal_set_config_path(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.config_path)
}
inline std::string* transparent_chassis_config::mutable_config_path() {
  // @@protoc_insertion_point(field_mutable:adas.transparent_chassis_config.config_path)
  return _internal_mutable_config_path();
}
inline const std::string& transparent_chassis_config::_internal_config_path() const {
  return config_path_.Get();
}
inline void transparent_chassis_config::_internal_set_config_path(const std::string& value) {
  
  config_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void transparent_chassis_config::set_config_path(std::string&& value) {
  
  config_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.transparent_chassis_config.config_path)
}
inline void transparent_chassis_config::set_config_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.transparent_chassis_config.config_path)
}
inline void transparent_chassis_config::set_config_path(const char* value,
    size_t size) {
  
  config_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.transparent_chassis_config.config_path)
}
inline std::string* transparent_chassis_config::_internal_mutable_config_path() {
  
  return config_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* transparent_chassis_config::release_config_path() {
  // @@protoc_insertion_point(field_release:adas.transparent_chassis_config.config_path)
  return config_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void transparent_chassis_config::set_allocated_config_path(std::string* config_path) {
  if (config_path != nullptr) {
    
  } else {
    
  }
  config_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.transparent_chassis_config.config_path)
}
inline std::string* transparent_chassis_config::unsafe_arena_release_config_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.transparent_chassis_config.config_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return config_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void transparent_chassis_config::unsafe_arena_set_allocated_config_path(
    std::string* config_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (config_path != nullptr) {
    
  } else {
    
  }
  config_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      config_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.transparent_chassis_config.config_path)
}

// string input_dir_path = 3;
inline void transparent_chassis_config::clear_input_dir_path() {
  input_dir_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& transparent_chassis_config::input_dir_path() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.input_dir_path)
  return _internal_input_dir_path();
}
inline void transparent_chassis_config::set_input_dir_path(const std::string& value) {
  _internal_set_input_dir_path(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.input_dir_path)
}
inline std::string* transparent_chassis_config::mutable_input_dir_path() {
  // @@protoc_insertion_point(field_mutable:adas.transparent_chassis_config.input_dir_path)
  return _internal_mutable_input_dir_path();
}
inline const std::string& transparent_chassis_config::_internal_input_dir_path() const {
  return input_dir_path_.Get();
}
inline void transparent_chassis_config::_internal_set_input_dir_path(const std::string& value) {
  
  input_dir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void transparent_chassis_config::set_input_dir_path(std::string&& value) {
  
  input_dir_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.transparent_chassis_config.input_dir_path)
}
inline void transparent_chassis_config::set_input_dir_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_dir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.transparent_chassis_config.input_dir_path)
}
inline void transparent_chassis_config::set_input_dir_path(const char* value,
    size_t size) {
  
  input_dir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.transparent_chassis_config.input_dir_path)
}
inline std::string* transparent_chassis_config::_internal_mutable_input_dir_path() {
  
  return input_dir_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* transparent_chassis_config::release_input_dir_path() {
  // @@protoc_insertion_point(field_release:adas.transparent_chassis_config.input_dir_path)
  return input_dir_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void transparent_chassis_config::set_allocated_input_dir_path(std::string* input_dir_path) {
  if (input_dir_path != nullptr) {
    
  } else {
    
  }
  input_dir_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_dir_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.transparent_chassis_config.input_dir_path)
}
inline std::string* transparent_chassis_config::unsafe_arena_release_input_dir_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.transparent_chassis_config.input_dir_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return input_dir_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void transparent_chassis_config::unsafe_arena_set_allocated_input_dir_path(
    std::string* input_dir_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (input_dir_path != nullptr) {
    
  } else {
    
  }
  input_dir_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      input_dir_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.transparent_chassis_config.input_dir_path)
}

// string output_dir_path = 4;
inline void transparent_chassis_config::clear_output_dir_path() {
  output_dir_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& transparent_chassis_config::output_dir_path() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.output_dir_path)
  return _internal_output_dir_path();
}
inline void transparent_chassis_config::set_output_dir_path(const std::string& value) {
  _internal_set_output_dir_path(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.output_dir_path)
}
inline std::string* transparent_chassis_config::mutable_output_dir_path() {
  // @@protoc_insertion_point(field_mutable:adas.transparent_chassis_config.output_dir_path)
  return _internal_mutable_output_dir_path();
}
inline const std::string& transparent_chassis_config::_internal_output_dir_path() const {
  return output_dir_path_.Get();
}
inline void transparent_chassis_config::_internal_set_output_dir_path(const std::string& value) {
  
  output_dir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void transparent_chassis_config::set_output_dir_path(std::string&& value) {
  
  output_dir_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:adas.transparent_chassis_config.output_dir_path)
}
inline void transparent_chassis_config::set_output_dir_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_dir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:adas.transparent_chassis_config.output_dir_path)
}
inline void transparent_chassis_config::set_output_dir_path(const char* value,
    size_t size) {
  
  output_dir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:adas.transparent_chassis_config.output_dir_path)
}
inline std::string* transparent_chassis_config::_internal_mutable_output_dir_path() {
  
  return output_dir_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* transparent_chassis_config::release_output_dir_path() {
  // @@protoc_insertion_point(field_release:adas.transparent_chassis_config.output_dir_path)
  return output_dir_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void transparent_chassis_config::set_allocated_output_dir_path(std::string* output_dir_path) {
  if (output_dir_path != nullptr) {
    
  } else {
    
  }
  output_dir_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_dir_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:adas.transparent_chassis_config.output_dir_path)
}
inline std::string* transparent_chassis_config::unsafe_arena_release_output_dir_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:adas.transparent_chassis_config.output_dir_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return output_dir_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void transparent_chassis_config::unsafe_arena_set_allocated_output_dir_path(
    std::string* output_dir_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (output_dir_path != nullptr) {
    
  } else {
    
  }
  output_dir_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      output_dir_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.transparent_chassis_config.output_dir_path)
}

// uint32 bev_w = 5;
inline void transparent_chassis_config::clear_bev_w() {
  bev_w_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 transparent_chassis_config::_internal_bev_w() const {
  return bev_w_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 transparent_chassis_config::bev_w() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.bev_w)
  return _internal_bev_w();
}
inline void transparent_chassis_config::_internal_set_bev_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bev_w_ = value;
}
inline void transparent_chassis_config::set_bev_w(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bev_w(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.bev_w)
}

// uint32 bev_h = 6;
inline void transparent_chassis_config::clear_bev_h() {
  bev_h_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 transparent_chassis_config::_internal_bev_h() const {
  return bev_h_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 transparent_chassis_config::bev_h() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.bev_h)
  return _internal_bev_h();
}
inline void transparent_chassis_config::_internal_set_bev_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bev_h_ = value;
}
inline void transparent_chassis_config::set_bev_h(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bev_h(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.bev_h)
}

// float bev_ratio = 7;
inline void transparent_chassis_config::clear_bev_ratio() {
  bev_ratio_ = 0;
}
inline float transparent_chassis_config::_internal_bev_ratio() const {
  return bev_ratio_;
}
inline float transparent_chassis_config::bev_ratio() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.bev_ratio)
  return _internal_bev_ratio();
}
inline void transparent_chassis_config::_internal_set_bev_ratio(float value) {
  
  bev_ratio_ = value;
}
inline void transparent_chassis_config::set_bev_ratio(float value) {
  _internal_set_bev_ratio(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.bev_ratio)
}

// float bev_center_x = 8;
inline void transparent_chassis_config::clear_bev_center_x() {
  bev_center_x_ = 0;
}
inline float transparent_chassis_config::_internal_bev_center_x() const {
  return bev_center_x_;
}
inline float transparent_chassis_config::bev_center_x() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.bev_center_x)
  return _internal_bev_center_x();
}
inline void transparent_chassis_config::_internal_set_bev_center_x(float value) {
  
  bev_center_x_ = value;
}
inline void transparent_chassis_config::set_bev_center_x(float value) {
  _internal_set_bev_center_x(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.bev_center_x)
}

// float bev_center_y = 9;
inline void transparent_chassis_config::clear_bev_center_y() {
  bev_center_y_ = 0;
}
inline float transparent_chassis_config::_internal_bev_center_y() const {
  return bev_center_y_;
}
inline float transparent_chassis_config::bev_center_y() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.bev_center_y)
  return _internal_bev_center_y();
}
inline void transparent_chassis_config::_internal_set_bev_center_y(float value) {
  
  bev_center_y_ = value;
}
inline void transparent_chassis_config::set_bev_center_y(float value) {
  _internal_set_bev_center_y(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.bev_center_y)
}

// float shift_lr = 10;
inline void transparent_chassis_config::clear_shift_lr() {
  shift_lr_ = 0;
}
inline float transparent_chassis_config::_internal_shift_lr() const {
  return shift_lr_;
}
inline float transparent_chassis_config::shift_lr() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.shift_lr)
  return _internal_shift_lr();
}
inline void transparent_chassis_config::_internal_set_shift_lr(float value) {
  
  shift_lr_ = value;
}
inline void transparent_chassis_config::set_shift_lr(float value) {
  _internal_set_shift_lr(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.shift_lr)
}

// float shift_tb = 11;
inline void transparent_chassis_config::clear_shift_tb() {
  shift_tb_ = 0;
}
inline float transparent_chassis_config::_internal_shift_tb() const {
  return shift_tb_;
}
inline float transparent_chassis_config::shift_tb() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.shift_tb)
  return _internal_shift_tb();
}
inline void transparent_chassis_config::_internal_set_shift_tb(float value) {
  
  shift_tb_ = value;
}
inline void transparent_chassis_config::set_shift_tb(float value) {
  _internal_set_shift_tb(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.shift_tb)
}

// float filter_kernel_size = 12;
inline void transparent_chassis_config::clear_filter_kernel_size() {
  filter_kernel_size_ = 0;
}
inline float transparent_chassis_config::_internal_filter_kernel_size() const {
  return filter_kernel_size_;
}
inline float transparent_chassis_config::filter_kernel_size() const {
  // @@protoc_insertion_point(field_get:adas.transparent_chassis_config.filter_kernel_size)
  return _internal_filter_kernel_size();
}
inline void transparent_chassis_config::_internal_set_filter_kernel_size(float value) {
  
  filter_kernel_size_ = value;
}
inline void transparent_chassis_config::set_filter_kernel_size(float value) {
  _internal_set_filter_kernel_size(value);
  // @@protoc_insertion_point(field_set:adas.transparent_chassis_config.filter_kernel_size)
}

// -------------------------------------------------------------------

// Config

// .adas.avm_2d_config avm_2d_config = 1;
inline bool Config::_internal_has_avm_2d_config() const {
  return this != internal_default_instance() && avm_2d_config_ != nullptr;
}
inline bool Config::has_avm_2d_config() const {
  return _internal_has_avm_2d_config();
}
inline void Config::clear_avm_2d_config() {
  if (GetArena() == nullptr && avm_2d_config_ != nullptr) {
    delete avm_2d_config_;
  }
  avm_2d_config_ = nullptr;
}
inline const ::adas::avm_2d_config& Config::_internal_avm_2d_config() const {
  const ::adas::avm_2d_config* p = avm_2d_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::adas::avm_2d_config*>(
      &::adas::_avm_2d_config_default_instance_);
}
inline const ::adas::avm_2d_config& Config::avm_2d_config() const {
  // @@protoc_insertion_point(field_get:adas.Config.avm_2d_config)
  return _internal_avm_2d_config();
}
inline void Config::unsafe_arena_set_allocated_avm_2d_config(
    ::adas::avm_2d_config* avm_2d_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(avm_2d_config_);
  }
  avm_2d_config_ = avm_2d_config;
  if (avm_2d_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.Config.avm_2d_config)
}
inline ::adas::avm_2d_config* Config::release_avm_2d_config() {
  auto temp = unsafe_arena_release_avm_2d_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::adas::avm_2d_config* Config::unsafe_arena_release_avm_2d_config() {
  // @@protoc_insertion_point(field_release:adas.Config.avm_2d_config)
  
  ::adas::avm_2d_config* temp = avm_2d_config_;
  avm_2d_config_ = nullptr;
  return temp;
}
inline ::adas::avm_2d_config* Config::_internal_mutable_avm_2d_config() {
  
  if (avm_2d_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::adas::avm_2d_config>(GetArena());
    avm_2d_config_ = p;
  }
  return avm_2d_config_;
}
inline ::adas::avm_2d_config* Config::mutable_avm_2d_config() {
  // @@protoc_insertion_point(field_mutable:adas.Config.avm_2d_config)
  return _internal_mutable_avm_2d_config();
}
inline void Config::set_allocated_avm_2d_config(::adas::avm_2d_config* avm_2d_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete avm_2d_config_;
  }
  if (avm_2d_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(avm_2d_config);
    if (message_arena != submessage_arena) {
      avm_2d_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, avm_2d_config, submessage_arena);
    }
    
  } else {
    
  }
  avm_2d_config_ = avm_2d_config;
  // @@protoc_insertion_point(field_set_allocated:adas.Config.avm_2d_config)
}

// .adas.single_view_config single_view_config = 2;
inline bool Config::_internal_has_single_view_config() const {
  return this != internal_default_instance() && single_view_config_ != nullptr;
}
inline bool Config::has_single_view_config() const {
  return _internal_has_single_view_config();
}
inline void Config::clear_single_view_config() {
  if (GetArena() == nullptr && single_view_config_ != nullptr) {
    delete single_view_config_;
  }
  single_view_config_ = nullptr;
}
inline const ::adas::single_view_config& Config::_internal_single_view_config() const {
  const ::adas::single_view_config* p = single_view_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::adas::single_view_config*>(
      &::adas::_single_view_config_default_instance_);
}
inline const ::adas::single_view_config& Config::single_view_config() const {
  // @@protoc_insertion_point(field_get:adas.Config.single_view_config)
  return _internal_single_view_config();
}
inline void Config::unsafe_arena_set_allocated_single_view_config(
    ::adas::single_view_config* single_view_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(single_view_config_);
  }
  single_view_config_ = single_view_config;
  if (single_view_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.Config.single_view_config)
}
inline ::adas::single_view_config* Config::release_single_view_config() {
  auto temp = unsafe_arena_release_single_view_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::adas::single_view_config* Config::unsafe_arena_release_single_view_config() {
  // @@protoc_insertion_point(field_release:adas.Config.single_view_config)
  
  ::adas::single_view_config* temp = single_view_config_;
  single_view_config_ = nullptr;
  return temp;
}
inline ::adas::single_view_config* Config::_internal_mutable_single_view_config() {
  
  if (single_view_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::adas::single_view_config>(GetArena());
    single_view_config_ = p;
  }
  return single_view_config_;
}
inline ::adas::single_view_config* Config::mutable_single_view_config() {
  // @@protoc_insertion_point(field_mutable:adas.Config.single_view_config)
  return _internal_mutable_single_view_config();
}
inline void Config::set_allocated_single_view_config(::adas::single_view_config* single_view_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete single_view_config_;
  }
  if (single_view_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(single_view_config);
    if (message_arena != submessage_arena) {
      single_view_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_view_config, submessage_arena);
    }
    
  } else {
    
  }
  single_view_config_ = single_view_config;
  // @@protoc_insertion_point(field_set_allocated:adas.Config.single_view_config)
}

// .adas.transparent_chassis_config transparent_chassis_config = 3;
inline bool Config::_internal_has_transparent_chassis_config() const {
  return this != internal_default_instance() && transparent_chassis_config_ != nullptr;
}
inline bool Config::has_transparent_chassis_config() const {
  return _internal_has_transparent_chassis_config();
}
inline void Config::clear_transparent_chassis_config() {
  if (GetArena() == nullptr && transparent_chassis_config_ != nullptr) {
    delete transparent_chassis_config_;
  }
  transparent_chassis_config_ = nullptr;
}
inline const ::adas::transparent_chassis_config& Config::_internal_transparent_chassis_config() const {
  const ::adas::transparent_chassis_config* p = transparent_chassis_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::adas::transparent_chassis_config*>(
      &::adas::_transparent_chassis_config_default_instance_);
}
inline const ::adas::transparent_chassis_config& Config::transparent_chassis_config() const {
  // @@protoc_insertion_point(field_get:adas.Config.transparent_chassis_config)
  return _internal_transparent_chassis_config();
}
inline void Config::unsafe_arena_set_allocated_transparent_chassis_config(
    ::adas::transparent_chassis_config* transparent_chassis_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transparent_chassis_config_);
  }
  transparent_chassis_config_ = transparent_chassis_config;
  if (transparent_chassis_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:adas.Config.transparent_chassis_config)
}
inline ::adas::transparent_chassis_config* Config::release_transparent_chassis_config() {
  auto temp = unsafe_arena_release_transparent_chassis_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::adas::transparent_chassis_config* Config::unsafe_arena_release_transparent_chassis_config() {
  // @@protoc_insertion_point(field_release:adas.Config.transparent_chassis_config)
  
  ::adas::transparent_chassis_config* temp = transparent_chassis_config_;
  transparent_chassis_config_ = nullptr;
  return temp;
}
inline ::adas::transparent_chassis_config* Config::_internal_mutable_transparent_chassis_config() {
  
  if (transparent_chassis_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::adas::transparent_chassis_config>(GetArena());
    transparent_chassis_config_ = p;
  }
  return transparent_chassis_config_;
}
inline ::adas::transparent_chassis_config* Config::mutable_transparent_chassis_config() {
  // @@protoc_insertion_point(field_mutable:adas.Config.transparent_chassis_config)
  return _internal_mutable_transparent_chassis_config();
}
inline void Config::set_allocated_transparent_chassis_config(::adas::transparent_chassis_config* transparent_chassis_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transparent_chassis_config_;
  }
  if (transparent_chassis_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transparent_chassis_config);
    if (message_arena != submessage_arena) {
      transparent_chassis_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transparent_chassis_config, submessage_arena);
    }
    
  } else {
    
  }
  transparent_chassis_config_ = transparent_chassis_config;
  // @@protoc_insertion_point(field_set_allocated:adas.Config.transparent_chassis_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace adas

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_avm2d_5fconfig_2eproto
