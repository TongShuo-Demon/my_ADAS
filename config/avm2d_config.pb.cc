// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avm2d_config.proto

#include "avm2d_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_avm2d_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_avm_2d_config_avm2d_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_avm2d_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_single_view_config_avm2d_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_avm2d_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_transparent_chassis_config_avm2d_5fconfig_2eproto;
namespace adas {
class avm_2d_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<avm_2d_config> _instance;
} _avm_2d_config_default_instance_;
class single_view_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<single_view_config> _instance;
} _single_view_config_default_instance_;
class transparent_chassis_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<transparent_chassis_config> _instance;
} _transparent_chassis_config_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Config> _instance;
} _Config_default_instance_;
}  // namespace adas
static void InitDefaultsscc_info_Config_avm2d_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adas::_Config_default_instance_;
    new (ptr) ::adas::Config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adas::Config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Config_avm2d_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Config_avm2d_5fconfig_2eproto}, {
      &scc_info_avm_2d_config_avm2d_5fconfig_2eproto.base,
      &scc_info_single_view_config_avm2d_5fconfig_2eproto.base,
      &scc_info_transparent_chassis_config_avm2d_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_avm_2d_config_avm2d_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adas::_avm_2d_config_default_instance_;
    new (ptr) ::adas::avm_2d_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adas::avm_2d_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_avm_2d_config_avm2d_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_avm_2d_config_avm2d_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_single_view_config_avm2d_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adas::_single_view_config_default_instance_;
    new (ptr) ::adas::single_view_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adas::single_view_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_single_view_config_avm2d_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_single_view_config_avm2d_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_transparent_chassis_config_avm2d_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::adas::_transparent_chassis_config_default_instance_;
    new (ptr) ::adas::transparent_chassis_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::adas::transparent_chassis_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_transparent_chassis_config_avm2d_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_transparent_chassis_config_avm2d_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_avm2d_5fconfig_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_avm2d_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_avm2d_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_avm2d_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, camera_param_path_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, camera_image_path_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, avm2d_remap_path_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, avm2d_weights_masks_path_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, xl_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, yl_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, xr_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, yr_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, birdview_width_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, birdview_height_),
  PROTOBUF_FIELD_OFFSET(::adas::avm_2d_config, car_image_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adas::single_view_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adas::single_view_config, input_image_path_),
  PROTOBUF_FIELD_OFFSET(::adas::single_view_config, output_image_path_),
  PROTOBUF_FIELD_OFFSET(::adas::single_view_config, camera_param_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, dr_path_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, config_path_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, input_dir_path_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, output_dir_path_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, bev_w_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, bev_h_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, bev_ratio_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, bev_center_x_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, bev_center_y_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, shift_lr_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, shift_tb_),
  PROTOBUF_FIELD_OFFSET(::adas::transparent_chassis_config, filter_kernel_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::adas::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::adas::Config, avm_2d_config_),
  PROTOBUF_FIELD_OFFSET(::adas::Config, single_view_config_),
  PROTOBUF_FIELD_OFFSET(::adas::Config, transparent_chassis_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::adas::avm_2d_config)},
  { 16, -1, sizeof(::adas::single_view_config)},
  { 24, -1, sizeof(::adas::transparent_chassis_config)},
  { 41, -1, sizeof(::adas::Config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adas::_avm_2d_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adas::_single_view_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adas::_transparent_chassis_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::adas::_Config_default_instance_),
};

const char descriptor_table_protodef_avm2d_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022avm2d_config.proto\022\004adas\"\372\001\n\ravm_2d_co"
  "nfig\022\031\n\021camera_param_path\030\001 \001(\t\022\031\n\021camer"
  "a_image_path\030\002 \001(\t\022\030\n\020avm2d_remap_path\030\003"
  " \001(\t\022 \n\030avm2d_weights_masks_path\030\004 \001(\t\022\n"
  "\n\002xl\030\005 \001(\r\022\n\n\002yl\030\006 \001(\r\022\n\n\002xr\030\007 \001(\r\022\n\n\002yr"
  "\030\010 \001(\r\022\026\n\016birdview_width\030\t \001(\r\022\027\n\017birdvi"
  "ew_height\030\n \001(\r\022\026\n\016car_image_path\030\013 \001(\t\""
  "d\n\022single_view_config\022\030\n\020input_image_pat"
  "h\030\001 \001(\t\022\031\n\021output_image_path\030\002 \001(\t\022\031\n\021ca"
  "mera_param_path\030\003 \001(\t\"\220\002\n\032transparent_ch"
  "assis_config\022\017\n\007dr_path\030\001 \001(\t\022\023\n\013config_"
  "path\030\002 \001(\t\022\026\n\016input_dir_path\030\003 \001(\t\022\027\n\017ou"
  "tput_dir_path\030\004 \001(\t\022\r\n\005bev_w\030\005 \001(\r\022\r\n\005be"
  "v_h\030\006 \001(\r\022\021\n\tbev_ratio\030\007 \001(\002\022\024\n\014bev_cent"
  "er_x\030\010 \001(\002\022\024\n\014bev_center_y\030\t \001(\002\022\020\n\010shif"
  "t_lr\030\n \001(\002\022\020\n\010shift_tb\030\013 \001(\002\022\032\n\022filter_k"
  "ernel_size\030\014 \001(\002\"\260\001\n\006Config\022*\n\ravm_2d_co"
  "nfig\030\001 \001(\0132\023.adas.avm_2d_config\0224\n\022singl"
  "e_view_config\030\002 \001(\0132\030.adas.single_view_c"
  "onfig\022D\n\032transparent_chassis_config\030\003 \001("
  "\0132 .adas.transparent_chassis_configb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_avm2d_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_avm2d_5fconfig_2eproto_sccs[4] = {
  &scc_info_Config_avm2d_5fconfig_2eproto.base,
  &scc_info_avm_2d_config_avm2d_5fconfig_2eproto.base,
  &scc_info_single_view_config_avm2d_5fconfig_2eproto.base,
  &scc_info_transparent_chassis_config_avm2d_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_avm2d_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avm2d_5fconfig_2eproto = {
  false, false, descriptor_table_protodef_avm2d_5fconfig_2eproto, "avm2d_config.proto", 843,
  &descriptor_table_avm2d_5fconfig_2eproto_once, descriptor_table_avm2d_5fconfig_2eproto_sccs, descriptor_table_avm2d_5fconfig_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_avm2d_5fconfig_2eproto::offsets,
  file_level_metadata_avm2d_5fconfig_2eproto, 4, file_level_enum_descriptors_avm2d_5fconfig_2eproto, file_level_service_descriptors_avm2d_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_avm2d_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_avm2d_5fconfig_2eproto)), true);
namespace adas {

// ===================================================================

void avm_2d_config::InitAsDefaultInstance() {
}
class avm_2d_config::_Internal {
 public:
};

avm_2d_config::avm_2d_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adas.avm_2d_config)
}
avm_2d_config::avm_2d_config(const avm_2d_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_param_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_param_path().empty()) {
    camera_param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_param_path(),
      GetArena());
  }
  camera_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_image_path().empty()) {
    camera_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_image_path(),
      GetArena());
  }
  avm2d_remap_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avm2d_remap_path().empty()) {
    avm2d_remap_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avm2d_remap_path(),
      GetArena());
  }
  avm2d_weights_masks_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avm2d_weights_masks_path().empty()) {
    avm2d_weights_masks_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avm2d_weights_masks_path(),
      GetArena());
  }
  car_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_car_image_path().empty()) {
    car_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_car_image_path(),
      GetArena());
  }
  ::memcpy(&xl_, &from.xl_,
    static_cast<size_t>(reinterpret_cast<char*>(&birdview_height_) -
    reinterpret_cast<char*>(&xl_)) + sizeof(birdview_height_));
  // @@protoc_insertion_point(copy_constructor:adas.avm_2d_config)
}

void avm_2d_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_avm_2d_config_avm2d_5fconfig_2eproto.base);
  camera_param_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avm2d_remap_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avm2d_weights_masks_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&xl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&birdview_height_) -
      reinterpret_cast<char*>(&xl_)) + sizeof(birdview_height_));
}

avm_2d_config::~avm_2d_config() {
  // @@protoc_insertion_point(destructor:adas.avm_2d_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void avm_2d_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  camera_param_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avm2d_remap_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avm2d_weights_masks_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  car_image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void avm_2d_config::ArenaDtor(void* object) {
  avm_2d_config* _this = reinterpret_cast< avm_2d_config* >(object);
  (void)_this;
}
void avm_2d_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void avm_2d_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const avm_2d_config& avm_2d_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_avm_2d_config_avm2d_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void avm_2d_config::Clear() {
// @@protoc_insertion_point(message_clear_start:adas.avm_2d_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_param_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avm2d_remap_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avm2d_weights_masks_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&xl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&birdview_height_) -
      reinterpret_cast<char*>(&xl_)) + sizeof(birdview_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* avm_2d_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string camera_param_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_camera_param_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.avm_2d_config.camera_param_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string camera_image_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_camera_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.avm_2d_config.camera_image_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avm2d_remap_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avm2d_remap_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.avm_2d_config.avm2d_remap_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avm2d_weights_masks_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avm2d_weights_masks_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.avm_2d_config.avm2d_weights_masks_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 xl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          xl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 yl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          yl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 xr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          xr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 yr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          yr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 birdview_width = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          birdview_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 birdview_height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          birdview_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string car_image_path = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_car_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.avm_2d_config.car_image_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* avm_2d_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adas.avm_2d_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_param_path = 1;
  if (this->camera_param_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_param_path().data(), static_cast<int>(this->_internal_camera_param_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.avm_2d_config.camera_param_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camera_param_path(), target);
  }

  // string camera_image_path = 2;
  if (this->camera_image_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_image_path().data(), static_cast<int>(this->_internal_camera_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.avm_2d_config.camera_image_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_image_path(), target);
  }

  // string avm2d_remap_path = 3;
  if (this->avm2d_remap_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avm2d_remap_path().data(), static_cast<int>(this->_internal_avm2d_remap_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.avm_2d_config.avm2d_remap_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avm2d_remap_path(), target);
  }

  // string avm2d_weights_masks_path = 4;
  if (this->avm2d_weights_masks_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avm2d_weights_masks_path().data(), static_cast<int>(this->_internal_avm2d_weights_masks_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.avm_2d_config.avm2d_weights_masks_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_avm2d_weights_masks_path(), target);
  }

  // uint32 xl = 5;
  if (this->xl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_xl(), target);
  }

  // uint32 yl = 6;
  if (this->yl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_yl(), target);
  }

  // uint32 xr = 7;
  if (this->xr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_xr(), target);
  }

  // uint32 yr = 8;
  if (this->yr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_yr(), target);
  }

  // uint32 birdview_width = 9;
  if (this->birdview_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_birdview_width(), target);
  }

  // uint32 birdview_height = 10;
  if (this->birdview_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_birdview_height(), target);
  }

  // string car_image_path = 11;
  if (this->car_image_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_car_image_path().data(), static_cast<int>(this->_internal_car_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.avm_2d_config.car_image_path");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_car_image_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adas.avm_2d_config)
  return target;
}

size_t avm_2d_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adas.avm_2d_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_param_path = 1;
  if (this->camera_param_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_param_path());
  }

  // string camera_image_path = 2;
  if (this->camera_image_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_image_path());
  }

  // string avm2d_remap_path = 3;
  if (this->avm2d_remap_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avm2d_remap_path());
  }

  // string avm2d_weights_masks_path = 4;
  if (this->avm2d_weights_masks_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avm2d_weights_masks_path());
  }

  // string car_image_path = 11;
  if (this->car_image_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_car_image_path());
  }

  // uint32 xl = 5;
  if (this->xl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_xl());
  }

  // uint32 yl = 6;
  if (this->yl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yl());
  }

  // uint32 xr = 7;
  if (this->xr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_xr());
  }

  // uint32 yr = 8;
  if (this->yr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yr());
  }

  // uint32 birdview_width = 9;
  if (this->birdview_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_birdview_width());
  }

  // uint32 birdview_height = 10;
  if (this->birdview_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_birdview_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void avm_2d_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adas.avm_2d_config)
  GOOGLE_DCHECK_NE(&from, this);
  const avm_2d_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<avm_2d_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adas.avm_2d_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adas.avm_2d_config)
    MergeFrom(*source);
  }
}

void avm_2d_config::MergeFrom(const avm_2d_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adas.avm_2d_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_param_path().size() > 0) {
    _internal_set_camera_param_path(from._internal_camera_param_path());
  }
  if (from.camera_image_path().size() > 0) {
    _internal_set_camera_image_path(from._internal_camera_image_path());
  }
  if (from.avm2d_remap_path().size() > 0) {
    _internal_set_avm2d_remap_path(from._internal_avm2d_remap_path());
  }
  if (from.avm2d_weights_masks_path().size() > 0) {
    _internal_set_avm2d_weights_masks_path(from._internal_avm2d_weights_masks_path());
  }
  if (from.car_image_path().size() > 0) {
    _internal_set_car_image_path(from._internal_car_image_path());
  }
  if (from.xl() != 0) {
    _internal_set_xl(from._internal_xl());
  }
  if (from.yl() != 0) {
    _internal_set_yl(from._internal_yl());
  }
  if (from.xr() != 0) {
    _internal_set_xr(from._internal_xr());
  }
  if (from.yr() != 0) {
    _internal_set_yr(from._internal_yr());
  }
  if (from.birdview_width() != 0) {
    _internal_set_birdview_width(from._internal_birdview_width());
  }
  if (from.birdview_height() != 0) {
    _internal_set_birdview_height(from._internal_birdview_height());
  }
}

void avm_2d_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adas.avm_2d_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avm_2d_config::CopyFrom(const avm_2d_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adas.avm_2d_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avm_2d_config::IsInitialized() const {
  return true;
}

void avm_2d_config::InternalSwap(avm_2d_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camera_param_path_.Swap(&other->camera_param_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_image_path_.Swap(&other->camera_image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avm2d_remap_path_.Swap(&other->avm2d_remap_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  avm2d_weights_masks_path_.Swap(&other->avm2d_weights_masks_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  car_image_path_.Swap(&other->car_image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(avm_2d_config, birdview_height_)
      + sizeof(avm_2d_config::birdview_height_)
      - PROTOBUF_FIELD_OFFSET(avm_2d_config, xl_)>(
          reinterpret_cast<char*>(&xl_),
          reinterpret_cast<char*>(&other->xl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata avm_2d_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void single_view_config::InitAsDefaultInstance() {
}
class single_view_config::_Internal {
 public:
};

single_view_config::single_view_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adas.single_view_config)
}
single_view_config::single_view_config(const single_view_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_image_path().empty()) {
    input_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_image_path(),
      GetArena());
  }
  output_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_image_path().empty()) {
    output_image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_output_image_path(),
      GetArena());
  }
  camera_param_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_param_path().empty()) {
    camera_param_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_param_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:adas.single_view_config)
}

void single_view_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_single_view_config_avm2d_5fconfig_2eproto.base);
  input_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_param_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

single_view_config::~single_view_config() {
  // @@protoc_insertion_point(destructor:adas.single_view_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void single_view_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  input_image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_param_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void single_view_config::ArenaDtor(void* object) {
  single_view_config* _this = reinterpret_cast< single_view_config* >(object);
  (void)_this;
}
void single_view_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void single_view_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const single_view_config& single_view_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_single_view_config_avm2d_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void single_view_config::Clear() {
// @@protoc_insertion_point(message_clear_start:adas.single_view_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_param_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* single_view_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string input_image_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_input_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.single_view_config.input_image_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string output_image_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_output_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.single_view_config.output_image_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string camera_param_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_camera_param_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.single_view_config.camera_param_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* single_view_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adas.single_view_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_image_path = 1;
  if (this->input_image_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_image_path().data(), static_cast<int>(this->_internal_input_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.single_view_config.input_image_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_input_image_path(), target);
  }

  // string output_image_path = 2;
  if (this->output_image_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_image_path().data(), static_cast<int>(this->_internal_output_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.single_view_config.output_image_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output_image_path(), target);
  }

  // string camera_param_path = 3;
  if (this->camera_param_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_param_path().data(), static_cast<int>(this->_internal_camera_param_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.single_view_config.camera_param_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_camera_param_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adas.single_view_config)
  return target;
}

size_t single_view_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adas.single_view_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_image_path = 1;
  if (this->input_image_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_image_path());
  }

  // string output_image_path = 2;
  if (this->output_image_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_image_path());
  }

  // string camera_param_path = 3;
  if (this->camera_param_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_param_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void single_view_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adas.single_view_config)
  GOOGLE_DCHECK_NE(&from, this);
  const single_view_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<single_view_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adas.single_view_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adas.single_view_config)
    MergeFrom(*source);
  }
}

void single_view_config::MergeFrom(const single_view_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adas.single_view_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_image_path().size() > 0) {
    _internal_set_input_image_path(from._internal_input_image_path());
  }
  if (from.output_image_path().size() > 0) {
    _internal_set_output_image_path(from._internal_output_image_path());
  }
  if (from.camera_param_path().size() > 0) {
    _internal_set_camera_param_path(from._internal_camera_param_path());
  }
}

void single_view_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adas.single_view_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_view_config::CopyFrom(const single_view_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adas.single_view_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_view_config::IsInitialized() const {
  return true;
}

void single_view_config::InternalSwap(single_view_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  input_image_path_.Swap(&other->input_image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_image_path_.Swap(&other->output_image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_param_path_.Swap(&other->camera_param_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata single_view_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void transparent_chassis_config::InitAsDefaultInstance() {
}
class transparent_chassis_config::_Internal {
 public:
};

transparent_chassis_config::transparent_chassis_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adas.transparent_chassis_config)
}
transparent_chassis_config::transparent_chassis_config(const transparent_chassis_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dr_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dr_path().empty()) {
    dr_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dr_path(),
      GetArena());
  }
  config_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_path().empty()) {
    config_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_config_path(),
      GetArena());
  }
  input_dir_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_dir_path().empty()) {
    input_dir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_input_dir_path(),
      GetArena());
  }
  output_dir_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_dir_path().empty()) {
    output_dir_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_output_dir_path(),
      GetArena());
  }
  ::memcpy(&bev_w_, &from.bev_w_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_kernel_size_) -
    reinterpret_cast<char*>(&bev_w_)) + sizeof(filter_kernel_size_));
  // @@protoc_insertion_point(copy_constructor:adas.transparent_chassis_config)
}

void transparent_chassis_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_transparent_chassis_config_avm2d_5fconfig_2eproto.base);
  dr_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_dir_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_dir_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bev_w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_kernel_size_) -
      reinterpret_cast<char*>(&bev_w_)) + sizeof(filter_kernel_size_));
}

transparent_chassis_config::~transparent_chassis_config() {
  // @@protoc_insertion_point(destructor:adas.transparent_chassis_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void transparent_chassis_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dr_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_dir_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_dir_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void transparent_chassis_config::ArenaDtor(void* object) {
  transparent_chassis_config* _this = reinterpret_cast< transparent_chassis_config* >(object);
  (void)_this;
}
void transparent_chassis_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void transparent_chassis_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const transparent_chassis_config& transparent_chassis_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_transparent_chassis_config_avm2d_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void transparent_chassis_config::Clear() {
// @@protoc_insertion_point(message_clear_start:adas.transparent_chassis_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dr_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  config_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_dir_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_dir_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&bev_w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_kernel_size_) -
      reinterpret_cast<char*>(&bev_w_)) + sizeof(filter_kernel_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* transparent_chassis_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dr_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dr_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.transparent_chassis_config.dr_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string config_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_config_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.transparent_chassis_config.config_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string input_dir_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_dir_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.transparent_chassis_config.input_dir_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string output_dir_path = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_output_dir_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "adas.transparent_chassis_config.output_dir_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bev_w = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bev_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bev_h = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bev_h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float bev_ratio = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          bev_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bev_center_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          bev_center_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float bev_center_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          bev_center_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float shift_lr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          shift_lr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float shift_tb = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          shift_tb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float filter_kernel_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          filter_kernel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* transparent_chassis_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adas.transparent_chassis_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dr_path = 1;
  if (this->dr_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dr_path().data(), static_cast<int>(this->_internal_dr_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.transparent_chassis_config.dr_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dr_path(), target);
  }

  // string config_path = 2;
  if (this->config_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_config_path().data(), static_cast<int>(this->_internal_config_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.transparent_chassis_config.config_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_config_path(), target);
  }

  // string input_dir_path = 3;
  if (this->input_dir_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_dir_path().data(), static_cast<int>(this->_internal_input_dir_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.transparent_chassis_config.input_dir_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_input_dir_path(), target);
  }

  // string output_dir_path = 4;
  if (this->output_dir_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_dir_path().data(), static_cast<int>(this->_internal_output_dir_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "adas.transparent_chassis_config.output_dir_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output_dir_path(), target);
  }

  // uint32 bev_w = 5;
  if (this->bev_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bev_w(), target);
  }

  // uint32 bev_h = 6;
  if (this->bev_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bev_h(), target);
  }

  // float bev_ratio = 7;
  if (!(this->bev_ratio() <= 0 && this->bev_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_bev_ratio(), target);
  }

  // float bev_center_x = 8;
  if (!(this->bev_center_x() <= 0 && this->bev_center_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_bev_center_x(), target);
  }

  // float bev_center_y = 9;
  if (!(this->bev_center_y() <= 0 && this->bev_center_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_bev_center_y(), target);
  }

  // float shift_lr = 10;
  if (!(this->shift_lr() <= 0 && this->shift_lr() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_shift_lr(), target);
  }

  // float shift_tb = 11;
  if (!(this->shift_tb() <= 0 && this->shift_tb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_shift_tb(), target);
  }

  // float filter_kernel_size = 12;
  if (!(this->filter_kernel_size() <= 0 && this->filter_kernel_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_filter_kernel_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adas.transparent_chassis_config)
  return target;
}

size_t transparent_chassis_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adas.transparent_chassis_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dr_path = 1;
  if (this->dr_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dr_path());
  }

  // string config_path = 2;
  if (this->config_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_path());
  }

  // string input_dir_path = 3;
  if (this->input_dir_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_dir_path());
  }

  // string output_dir_path = 4;
  if (this->output_dir_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_dir_path());
  }

  // uint32 bev_w = 5;
  if (this->bev_w() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bev_w());
  }

  // uint32 bev_h = 6;
  if (this->bev_h() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bev_h());
  }

  // float bev_ratio = 7;
  if (!(this->bev_ratio() <= 0 && this->bev_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float bev_center_x = 8;
  if (!(this->bev_center_x() <= 0 && this->bev_center_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float bev_center_y = 9;
  if (!(this->bev_center_y() <= 0 && this->bev_center_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float shift_lr = 10;
  if (!(this->shift_lr() <= 0 && this->shift_lr() >= 0)) {
    total_size += 1 + 4;
  }

  // float shift_tb = 11;
  if (!(this->shift_tb() <= 0 && this->shift_tb() >= 0)) {
    total_size += 1 + 4;
  }

  // float filter_kernel_size = 12;
  if (!(this->filter_kernel_size() <= 0 && this->filter_kernel_size() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void transparent_chassis_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adas.transparent_chassis_config)
  GOOGLE_DCHECK_NE(&from, this);
  const transparent_chassis_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<transparent_chassis_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adas.transparent_chassis_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adas.transparent_chassis_config)
    MergeFrom(*source);
  }
}

void transparent_chassis_config::MergeFrom(const transparent_chassis_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adas.transparent_chassis_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dr_path().size() > 0) {
    _internal_set_dr_path(from._internal_dr_path());
  }
  if (from.config_path().size() > 0) {
    _internal_set_config_path(from._internal_config_path());
  }
  if (from.input_dir_path().size() > 0) {
    _internal_set_input_dir_path(from._internal_input_dir_path());
  }
  if (from.output_dir_path().size() > 0) {
    _internal_set_output_dir_path(from._internal_output_dir_path());
  }
  if (from.bev_w() != 0) {
    _internal_set_bev_w(from._internal_bev_w());
  }
  if (from.bev_h() != 0) {
    _internal_set_bev_h(from._internal_bev_h());
  }
  if (!(from.bev_ratio() <= 0 && from.bev_ratio() >= 0)) {
    _internal_set_bev_ratio(from._internal_bev_ratio());
  }
  if (!(from.bev_center_x() <= 0 && from.bev_center_x() >= 0)) {
    _internal_set_bev_center_x(from._internal_bev_center_x());
  }
  if (!(from.bev_center_y() <= 0 && from.bev_center_y() >= 0)) {
    _internal_set_bev_center_y(from._internal_bev_center_y());
  }
  if (!(from.shift_lr() <= 0 && from.shift_lr() >= 0)) {
    _internal_set_shift_lr(from._internal_shift_lr());
  }
  if (!(from.shift_tb() <= 0 && from.shift_tb() >= 0)) {
    _internal_set_shift_tb(from._internal_shift_tb());
  }
  if (!(from.filter_kernel_size() <= 0 && from.filter_kernel_size() >= 0)) {
    _internal_set_filter_kernel_size(from._internal_filter_kernel_size());
  }
}

void transparent_chassis_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adas.transparent_chassis_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void transparent_chassis_config::CopyFrom(const transparent_chassis_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adas.transparent_chassis_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool transparent_chassis_config::IsInitialized() const {
  return true;
}

void transparent_chassis_config::InternalSwap(transparent_chassis_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dr_path_.Swap(&other->dr_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  config_path_.Swap(&other->config_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  input_dir_path_.Swap(&other->input_dir_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_dir_path_.Swap(&other->output_dir_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(transparent_chassis_config, filter_kernel_size_)
      + sizeof(transparent_chassis_config::filter_kernel_size_)
      - PROTOBUF_FIELD_OFFSET(transparent_chassis_config, bev_w_)>(
          reinterpret_cast<char*>(&bev_w_),
          reinterpret_cast<char*>(&other->bev_w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata transparent_chassis_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::adas::_Config_default_instance_._instance.get_mutable()->avm_2d_config_ = const_cast< ::adas::avm_2d_config*>(
      ::adas::avm_2d_config::internal_default_instance());
  ::adas::_Config_default_instance_._instance.get_mutable()->single_view_config_ = const_cast< ::adas::single_view_config*>(
      ::adas::single_view_config::internal_default_instance());
  ::adas::_Config_default_instance_._instance.get_mutable()->transparent_chassis_config_ = const_cast< ::adas::transparent_chassis_config*>(
      ::adas::transparent_chassis_config::internal_default_instance());
}
class Config::_Internal {
 public:
  static const ::adas::avm_2d_config& avm_2d_config(const Config* msg);
  static const ::adas::single_view_config& single_view_config(const Config* msg);
  static const ::adas::transparent_chassis_config& transparent_chassis_config(const Config* msg);
};

const ::adas::avm_2d_config&
Config::_Internal::avm_2d_config(const Config* msg) {
  return *msg->avm_2d_config_;
}
const ::adas::single_view_config&
Config::_Internal::single_view_config(const Config* msg) {
  return *msg->single_view_config_;
}
const ::adas::transparent_chassis_config&
Config::_Internal::transparent_chassis_config(const Config* msg) {
  return *msg->transparent_chassis_config_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:adas.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_avm_2d_config()) {
    avm_2d_config_ = new ::adas::avm_2d_config(*from.avm_2d_config_);
  } else {
    avm_2d_config_ = nullptr;
  }
  if (from._internal_has_single_view_config()) {
    single_view_config_ = new ::adas::single_view_config(*from.single_view_config_);
  } else {
    single_view_config_ = nullptr;
  }
  if (from._internal_has_transparent_chassis_config()) {
    transparent_chassis_config_ = new ::adas::transparent_chassis_config(*from.transparent_chassis_config_);
  } else {
    transparent_chassis_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:adas.Config)
}

void Config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Config_avm2d_5fconfig_2eproto.base);
  ::memset(&avm_2d_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transparent_chassis_config_) -
      reinterpret_cast<char*>(&avm_2d_config_)) + sizeof(transparent_chassis_config_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:adas.Config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete avm_2d_config_;
  if (this != internal_default_instance()) delete single_view_config_;
  if (this != internal_default_instance()) delete transparent_chassis_config_;
}

void Config::ArenaDtor(void* object) {
  Config* _this = reinterpret_cast< Config* >(object);
  (void)_this;
}
void Config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Config& Config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Config_avm2d_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:adas.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && avm_2d_config_ != nullptr) {
    delete avm_2d_config_;
  }
  avm_2d_config_ = nullptr;
  if (GetArena() == nullptr && single_view_config_ != nullptr) {
    delete single_view_config_;
  }
  single_view_config_ = nullptr;
  if (GetArena() == nullptr && transparent_chassis_config_ != nullptr) {
    delete transparent_chassis_config_;
  }
  transparent_chassis_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .adas.avm_2d_config avm_2d_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_avm_2d_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .adas.single_view_config single_view_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_view_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .adas.transparent_chassis_config transparent_chassis_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transparent_chassis_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:adas.Config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .adas.avm_2d_config avm_2d_config = 1;
  if (this->has_avm_2d_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::avm_2d_config(this), target, stream);
  }

  // .adas.single_view_config single_view_config = 2;
  if (this->has_single_view_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::single_view_config(this), target, stream);
  }

  // .adas.transparent_chassis_config transparent_chassis_config = 3;
  if (this->has_transparent_chassis_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transparent_chassis_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:adas.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:adas.Config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .adas.avm_2d_config avm_2d_config = 1;
  if (this->has_avm_2d_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *avm_2d_config_);
  }

  // .adas.single_view_config single_view_config = 2;
  if (this->has_single_view_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_view_config_);
  }

  // .adas.transparent_chassis_config transparent_chassis_config = 3;
  if (this->has_transparent_chassis_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transparent_chassis_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:adas.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:adas.Config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:adas.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:adas.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avm_2d_config()) {
    _internal_mutable_avm_2d_config()->::adas::avm_2d_config::MergeFrom(from._internal_avm_2d_config());
  }
  if (from.has_single_view_config()) {
    _internal_mutable_single_view_config()->::adas::single_view_config::MergeFrom(from._internal_single_view_config());
  }
  if (from.has_transparent_chassis_config()) {
    _internal_mutable_transparent_chassis_config()->::adas::transparent_chassis_config::MergeFrom(from._internal_transparent_chassis_config());
  }
}

void Config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:adas.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:adas.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, transparent_chassis_config_)
      + sizeof(Config::transparent_chassis_config_)
      - PROTOBUF_FIELD_OFFSET(Config, avm_2d_config_)>(
          reinterpret_cast<char*>(&avm_2d_config_),
          reinterpret_cast<char*>(&other->avm_2d_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace adas
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::adas::avm_2d_config* Arena::CreateMaybeMessage< ::adas::avm_2d_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adas::avm_2d_config >(arena);
}
template<> PROTOBUF_NOINLINE ::adas::single_view_config* Arena::CreateMaybeMessage< ::adas::single_view_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adas::single_view_config >(arena);
}
template<> PROTOBUF_NOINLINE ::adas::transparent_chassis_config* Arena::CreateMaybeMessage< ::adas::transparent_chassis_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adas::transparent_chassis_config >(arena);
}
template<> PROTOBUF_NOINLINE ::adas::Config* Arena::CreateMaybeMessage< ::adas::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::adas::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
